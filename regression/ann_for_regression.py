# -*- coding: utf-8 -*-
"""ANN_for_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-DPrRE5jXgE21dewb7EgPpagsDfbZlaq
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

N = 1000
X = np.random.random((N, 2))*6 - 3
Y = np.cos(2*X[:, 0]) + np.cos(3*X[:, 1])

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:, 0], X[:, 1], Y)
plt.show()

model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(128, activation='relu', input_shape=(2,)))
model.add(tf.keras.layers.Dense(1))

optimizer = tf.keras.optimizers.Adam()

model.compile(optimizer=optimizer, loss='mse')

r = model.fit(X, Y, epochs=500)

loss = r.history['loss']

plt.plot(loss)

Xtest = np.random.random((1000, 2))*10 - 5
Ytest = np.cos(2*Xtest[:, 0]) + np.cos(3*Xtest[:, 1])

Y_hat = model.predict(Xtest)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(Xtest[:, 0], Xtest[:, 1], Y_hat, 'r')
ax.scatter(Xtest[:, 0], Xtest[:, 1], Ytest, 'b')
plt.show()